0x000:                      | .pos 0
                            |         #TODO
                            |         # Initialize %rsp to stack (an address).
                            |         # By convention, the first two parameters are passed
                            |         # in %rdi and %rsi.
                            |         # Initialize %rdi to list.
                            |         # Initialize %rsi to mem[count].
                            |         #
                            | 	# Call your sort function and halt after returning from function.
                            | 	# In the final dump, the list should be sorted.
                            | 	
0x000: 30f40004000000000000 | irmovq stack, %rsp      # Initialize stack pointer
0x00a: 30f70802000000000000 | irmovq list, %rdi       # First argument: address of the list
0x014: 506f0002000000000000 | mrmovq count, %rsi      # Second argument: number of elements in the list
0x01e: 802800000000000000   | call sort               # Call the sort function
0x027: 00                   | halt                    # Halt after sorting
                            | 
0x028:                      | sort:   #sort(list, count)
                            | 	# Sorts the list in memory
                            | 	# %rdi is list: the address of the first element in the list
                            |         # %rsi is count: the number of elements in the list
                            | 	#TODO
                            | 	# call a bubble function count times
                            | 	# After each call, one element will be guaranteed to
                            | 	# be in the correct position. For example, after first call
                            | 	# the max element is in the right position (the end). After
                            | 	# the second call, the second largest element is in the correct
                            | 	# position, etc. 
                            | 	# Use a loop.
                            | 	# Return when done.
                            | 	
                            |                   # Return from function
                            | # %rdi: list address
                            |     # %rsi: count of elements
0x028: a06f                 |     pushq %rsi              # Save count on stack
0x02a: 30fa0100000000000000 |     irmovq $1, %r10 
                            | 
0x034:                      | sort_loop:
0x034: 50640000000000000000 |     mrmovq (%rsp), %rsi     # Load count from stack
0x03e: 30f00100000000000000 |     irmovq $1, %rax         # Compare count with 1
0x048: 6106                 |     subq %rax, %rsi
0x04a: 717b00000000000000   |     jle sort_done           # If count <= 1, finish
                            | 
0x053: 807e00000000000000   |     call bubble             # Call the bubble function
                            | 
0x05c: 50640000000000000000 |     mrmovq (%rsp), %rsi     # Reload count
0x066: 61a6                 |     subq %r10, %rsi           # Decrement count
0x068: 40640000000000000000 |     rmmovq %rsi, (%rsp)     # Save updated count
                            | 
0x072: 703400000000000000   |     jmp sort_loop           # Repeat loop
                            | 
0x07b:                      | sort_done:
0x07b: b06f                 |     popq %rsi               # Clean up stack
0x07d: 90                   |     ret 
                            | 
0x07e:                      | bubble: #bubble(list, count)
                            | 	# Compares two adjacent elements in the list and switches them 
                            | 	# if the one at the lower address is larger than the one at the
                            | 	# higher address.  
                            |         # %rdi is list: the address of the first element in the list
                            |         # %rsi is count: the number of elements in the list
                            |         #
                            | 	#TODO:
                            | 	# Get two adjacent elements out of memory
                            | 	# Swap them if they are out of order
                            | 	# Continue until the end of the list.	
                            |         # Return when done.
                            | 
                            | 
                            | 
                            |     # %rdi: list address
                            |     # %rsi: count of elements
0x07e: a06f                 |     pushq %rsi              # Save count on stack
                            | 
0x080: 30f00100000000000000 |     irmovq $1, %rax
0x08a: 6106                 |     subq %rax, %rsi         # Set loop counter (count - 1)
0x08c: 30f00000000000000000 |     irmovq $0, %rax         # Initialize swap flag
0x096: 30f30802000000000000 |     irmovq list, %rbx       # %rbx traverses the list
                            | 
0x0a0:                      | bubble_loop:
0x0a0: 50230000000000000000 |     mrmovq (%rbx), %rdx     # Load the first element
0x0aa: 50130800000000000000 |     mrmovq 8(%rbx), %rcx    # Load the second element
                            | 
0x0b4: 6112                 |     subq %rcx, %rdx         # Compare first and second
0x0b6: 71e700000000000000   |     jle no_swap             # If in order, skip the swap
                            | 
                            |     # Perform the swap
0x0bf: 50030000000000000000 |     mrmovq (%rbx), %rax     # Reload the first element
0x0c9: 50230800000000000000 |     mrmovq 8(%rbx), %rdx    # Reload the second element
0x0d3: 40230000000000000000 |     rmmovq %rdx, (%rbx)     # Swap: store second in first
0x0dd: 40030800000000000000 |     rmmovq %rax, 8(%rbx)    # Swap: store first in second
                            | 
0x0e7:                      | no_swap:
0x0e7: 30f10800000000000000 |     irmovq $8, %rcx         # Increment pointer by 8 bytes
0x0f1: 6013                 |     addq %rcx, %rbx         # Move to next pair
                            | 
0x0f3: 61a6                 |     subq %r10, %rsi           # Decrement loop counter
0x0f5: 76a000000000000000   |     jg bubble_loop          # Repeat loop if counter > 0
                            | 
0x0fe:                      | bubble_done:
0x0fe: b06f                 |     popq %rsi               # Restore count
0x100: 90                   |     ret           
                            | 
                            | 	# The data
0x200:                      | 	.pos 0x200	
0x200: 0f00000000000000     | count:  .quad 0xf
0x208: 2400000000000000     | list:	.quad 0x24
0x210: 0400000000000000     | 	.quad 0x4
0x218: f0ffffffffffffff     | 	.quad 0xfffffffffffffff0
0x220: 3700000000000000     | 	.quad 0x37
0x228: 4200000000000000     | 	.quad 0x42
0x230: ffffffffffffffff     | 	.quad 0xffffffffffffffff
0x238: a000000000000000     |         .quad 0xa0
0x240: a900000000000000     |         .quad 0xa9
0x248: 2900000000000000     |         .quad 0x29
0x250: 0a90000000000000     | 	.quad 0x900a
0x258: 0b00010000000000     | 	.quad 0x1000b
0x260: 0020010000000000     | 	.quad 0x12000
0x268: 4000010000000000     | 	.quad 0x10040
0x270: 0b000f0000000000     | 	.quad 0xf000b
0x278: 0001000000000000     | 	.quad 0x100
                            | 
0x400:                      | 	.pos 0x400
0x400: 0000000000000000     | stack:  .quad 0

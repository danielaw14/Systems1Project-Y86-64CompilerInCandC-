.pos 0
        #TODO
        # Initialize %rsp to stack (an address).
        # By convention, the first two parameters are passed
        # in %rdi and %rsi.
        # Initialize %rdi to list.
        # Initialize %rsi to mem[count].
        #
	# Call your sort function and halt after returning from function.
	# In the final dump, the list should be sorted.
	
irmovq stack, %rsp      # Initialize stack pointer
irmovq list, %rdi       # First argument: address of the list
mrmovq count, %rsi      # Second argument: number of elements in the list
call sort               # Call the sort function
halt                    # Halt after sorting

sort:   #sort(list, count)
	# Sorts the list in memory
	# %rdi is list: the address of the first element in the list
        # %rsi is count: the number of elements in the list
	#TODO
	# call a bubble function count times
	# After each call, one element will be guaranteed to
	# be in the correct position. For example, after first call
	# the max element is in the right position (the end). After
	# the second call, the second largest element is in the correct
	# position, etc. 
	# Use a loop.
	# Return when done.
	
                  # Return from function
# %rdi: list address
    # %rsi: count of elements
    pushq %rsi              # Save count on stack
    irmovq $1, %r10 

sort_loop:
    mrmovq (%rsp), %rsi     # Load count from stack
    irmovq $1, %rax         # Compare count with 1
    subq %rax, %rsi
    jle sort_done           # If count <= 1, finish

    call bubble             # Call the bubble function

    mrmovq (%rsp), %rsi     # Reload count
    subq %r10, %rsi           # Decrement count
    rmmovq %rsi, (%rsp)     # Save updated count

    jmp sort_loop           # Repeat loop

sort_done:
    popq %rsi               # Clean up stack
    ret 

bubble: #bubble(list, count)
	# Compares two adjacent elements in the list and switches them 
	# if the one at the lower address is larger than the one at the
	# higher address.  
        # %rdi is list: the address of the first element in the list
        # %rsi is count: the number of elements in the list
        #
	#TODO:
	# Get two adjacent elements out of memory
	# Swap them if they are out of order
	# Continue until the end of the list.	
        # Return when done.



    # %rdi: list address
    # %rsi: count of elements
    pushq %rsi              # Save count on stack

    irmovq $1, %rax
    subq %rax, %rsi         # Set loop counter (count - 1)
    irmovq $0, %rax         # Initialize swap flag
    irmovq list, %rbx       # %rbx traverses the list

bubble_loop:
    mrmovq (%rbx), %rdx     # Load the first element
    mrmovq 8(%rbx), %rcx    # Load the second element

    subq %rcx, %rdx         # Compare first and second
    jle no_swap             # If in order, skip the swap

    # Perform the swap
    mrmovq (%rbx), %rax     # Reload the first element
    mrmovq 8(%rbx), %rdx    # Reload the second element
    rmmovq %rdx, (%rbx)     # Swap: store second in first
    rmmovq %rax, 8(%rbx)    # Swap: store first in second

no_swap:
    irmovq $8, %rcx         # Increment pointer by 8 bytes
    addq %rcx, %rbx         # Move to next pair

    subq %r10, %rsi           # Decrement loop counter
    jg bubble_loop          # Repeat loop if counter > 0

bubble_done:
    popq %rsi               # Restore count
    ret           

	# The data
	.pos 0x200	
count:  .quad 0xf
list:	.quad 0x24
	.quad 0x4
	.quad 0xfffffffffffffff0
	.quad 0x37
	.quad 0x42
	.quad 0xffffffffffffffff
        .quad 0xa0
        .quad 0xa9
        .quad 0x29
	.quad 0x900a
	.quad 0x1000b
	.quad 0x12000
	.quad 0x10040
	.quad 0xf000b
	.quad 0x100

	.pos 0x400
stack:  .quad 0
